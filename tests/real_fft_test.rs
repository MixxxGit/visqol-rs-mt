use approx::assert_abs_diff_eq;
use realfft::RealFftPlanner;
use visqol_rs::{misc_audio::{load_as_mono}, misc_math::next_pow_two, misc_audio::mirror_spectrum};
use num::complex::Complex64;

#[test]
fn small_test()
{
    let mut samples = vec![0.000150529f64, 5.89739e-05,
    -9.36187e-05, -9.36187e-05, 0.000394677, 0.000303122, -9.36187e-05,
    0.000303122, 8.94924e-05, 0.000150529, -2.06314e-06, -0.000154656,
    2.84554e-05, 0.000272603, -0.000185174, 5.89739e-05, 0.000364159,
    0.000425196, 0.000120011, 5.89739e-05, 0.000120011, 0.000211566,
    0.000150529, 2.84554e-05, 0.000120011, 0.000150529, 8.94924e-05,
    -9.36187e-05, 0.000242085, 0.000486233, 8.94924e-05, 0.000120011,
    8.94924e-05, 8.94924e-05, 0.000150529, -0.000154656, -2.06314e-06,
    2.84554e-05, 0.000150529, -3.25817e-05, 5.89739e-05, 5.89739e-05,
    -0.000124137, 5.89739e-05, 2.84554e-05, 0.000181048, -0.000124137,
    -0.000368285, -9.36187e-05, -0.000246211, -3.25817e-05, 2.84554e-05,
    -6.31002e-05, -9.36187e-05, -2.06314e-06, -2.06314e-06, -0.000185174,
    -0.000124137, 2.84554e-05, 8.94924e-05, -0.00027673, -6.31002e-05,
    -0.000215693, 0.000425196, 8.94924e-05];
    let orig_samples = samples.clone();
    let length = next_pow_two(samples.len());
    samples.resize(length, 0.0);
    // make a planner
    let mut real_planner = RealFftPlanner::<f64>::new();
    // create a FFT
    let r2c = real_planner.plan_fft_forward(length);
    // make input and output vectors
    let mut out = r2c.make_output_vec();
    r2c.process(&mut samples[..], &mut out[..]).unwrap();
    
    println!("0 Hz bin: {}", out[0]);
    mirror_spectrum(&mut out);

    let expected_result = vec![
    Complex64::new(0.00322292904000000, 0.00000000000000),
    Complex64::new(0.00301682385173052, -0.00234848985608509),
    Complex64::new(-0.00103278592163890, -0.00340299713362453),
    Complex64::new(-0.00144609203801138, 0.000879145244592523),
    Complex64::new(0.00111610613898786, -0.000302181002376930),
    Complex64::new(-0.000318859126372253, -0.000367181194435114),
    Complex64::new(0.000673949619008653, -0.000310723599151972),
    Complex64::new(-3.49644446093239e-05, -0.000563954656030864),
    Complex64::new(0.000339817207812471, -0.000595601799964675),
    Complex64::new(0.000101609221059575, -0.000744744002384681),
    Complex64::new(-0.000586264026928805, -0.00191608882520754),
    Complex64::new(-0.00259248055250948, 0.000471875974326385),
    Complex64::new(0.000227097152831817, 0.00110287047767037),
    Complex64::new(-0.000722511594188183, 0.000313570758095348),
    Complex64::new(0.000407311564417282, 0.000853530053469442),
    Complex64::new(-0.000195617316848781, 0.000154945338489743),
    Complex64::new(0.000233147810677542, 0.000734349802916912),
    Complex64::new(0.000691246491351084, 0.000556673374244994),
    Complex64::new(0.000755913153376688, -0.00108748635434686),
    Complex64::new(-0.00157770746633928, 0.000303794653066800),
    Complex64::new(0.000896182317264214, 0.000835164328459981),
    Complex64::new(-0.000822997471347754, 0.000140031434634188),
    Complex64::new(0.00109713925301471, 0.00153219988568366),
    Complex64::new(0.000868409640532475, -0.000373929386206932),
    Complex64::new(0.000535362381861835, -0.000461656449099621),
    Complex64::new(-0.000994143865712840, 0.000213392912383107),
    Complex64::new(0.00128029686672661, 0.000927358696182279),
    Complex64::new(-0.000558399599341835, -0.000596241613983044),
    Complex64::new(0.000590345970887055, 0.00153746054605763),
    Complex64::new(0.000123623000739260, 0.000159309107927759),
    Complex64::new(0.00177647225128173, 0.00233356699195329),
    Complex64::new(0.00301793611579363, -0.00119668950186613),
    Complex64::new(0.00124919604000000, -0.00161748004000000),
    Complex64::new(-0.000322728346193144, -0.00214236853854895),
    Complex64::new(-0.000527239999720400, 0.000360874054041502),
    Complex64::new(0.000703316552686529, -0.000897998866185932),
    Complex64::new(-0.000525863898635626, -0.000277837377775431),
    Complex64::new(0.000432650139994782, -9.95533541164137e-05),
    Complex64::new(0.000151305582086382, -0.000519865718932982),
    Complex64::new(-6.14596442789589e-05, -7.84463404614790e-06),
    Complex64::new(0.00118869378923226, -0.000194024415891887),
    Complex64::new(0.000172206834052672, -0.00166972697788257),
    Complex64::new(-0.000273651726999761, -0.000867166897935699),
    Complex64::new(-0.00113046085098264, -0.00125829455984567),
    Complex64::new(-0.000958346131576863, 0.000520388328872528),
    Complex64::new(-0.000253487462883782, -0.000415594953354160),
    Complex64::new(-0.000970643681183129, -4.25544922587714e-05),
    Complex64::new(-0.00121987061492059, 0.000551139974883648),
    Complex64::new(0.000189986069322458, 0.00146679520291691),
    Complex64::new(3.91316837376560e-05, -3.82684506226442e-05),
    Complex64::new(0.000364085132964744, 0.00119600012367842),
    Complex64::new(0.000438119142196402, -0.000741712630986012),
    Complex64::new(-0.000619592071135628, 0.00114204782699505),
    Complex64::new(0.00128409408020558, 0.000424538502147734),
    Complex64::new(0.000651940026079785, -0.000330701565255067),
    Complex64::new(-0.000378907596869206, -0.000711769960239768),
    Complex64::new(3.12982109343697e-06, 0.00138106567324306),
    Complex64::new(0.00118819196612810, -0.000672809033262345),
    Complex64::new(-0.000236735235269374, 0.000463610199849060),
    Complex64::new(0.00121540962643760, -0.000589114879992856),
    Complex64::new(-0.000254141478622833, -5.44911772978580e-05),
    Complex64::new(0.00102320576458072, -0.000954731288479258),
    Complex64::new(-0.00112262885721622, -0.000516904492870956),
    Complex64::new(0.000267885080182829, -0.000205545255713845),
    Complex64::new(-0.00110072968000000, 0.00000000000000),
    Complex64::new(0.000267885080182829, 0.000205545255713845),
    Complex64::new(-0.00112262885721622, 0.000516904492870956),
    Complex64::new(0.00102320576458072, 0.000954731288479258),
    Complex64::new(-0.000254141478622833, 5.44911772978580e-05),
    Complex64::new(0.00121540962643760, 0.000589114879992856),
    Complex64::new(-0.000236735235269374, -0.000463610199849060),
    Complex64::new(0.00118819196612810, 0.000672809033262345),
    Complex64::new(3.12982109343697e-06, -0.00138106567324306),
    Complex64::new(-0.000378907596869206, 0.000711769960239768),
    Complex64::new(0.000651940026079785, 0.000330701565255067),
    Complex64::new(0.00128409408020558, -0.000424538502147734),
    Complex64::new(-0.000619592071135628, -0.00114204782699505),
    Complex64::new(0.000438119142196402, 0.000741712630986012),
    Complex64::new(0.000364085132964744, -0.00119600012367842),
    Complex64::new(3.91316837376560e-05, 3.82684506226442e-05),
    Complex64::new(0.000189986069322458, -0.00146679520291691),
    Complex64::new(-0.00121987061492059, -0.000551139974883648),
    Complex64::new(-0.000970643681183129, 4.25544922587714e-05),
    Complex64::new(-0.000253487462883782, 0.000415594953354160),
    Complex64::new(-0.000958346131576863, -0.000520388328872528),
    Complex64::new(-0.00113046085098264, 0.00125829455984567),
    Complex64::new(-0.000273651726999761, 0.000867166897935699),
    Complex64::new(0.000172206834052672, 0.00166972697788257),
    Complex64::new(0.00118869378923226, 0.000194024415891887),
    Complex64::new(-6.14596442789589e-05, 7.84463404614790e-06),
    Complex64::new(0.000151305582086382, 0.000519865718932982),
    Complex64::new(0.000432650139994782, 9.95533541164137e-05),
    Complex64::new(-0.000525863898635626, 0.000277837377775431),
    Complex64::new(0.000703316552686529, 0.000897998866185932),
    Complex64::new(-0.000527239999720400, -0.000360874054041502),
    Complex64::new(-0.000322728346193144, 0.00214236853854895),
    Complex64::new(0.00124919604000000, 0.00161748004000000),
    Complex64::new(0.00301793611579363, 0.00119668950186613),
    Complex64::new(0.00177647225128173, -0.00233356699195329),
    Complex64::new(0.000123623000739260, -0.000159309107927759),
    Complex64::new(0.000590345970887055, -0.00153746054605763),
    Complex64::new(-0.000558399599341835, 0.000596241613983044),
    Complex64::new(0.00128029686672661, -0.000927358696182279),
    Complex64::new(-0.000994143865712840, -0.000213392912383107),
    Complex64::new(0.000535362381861835, 0.000461656449099621),
    Complex64::new(0.000868409640532475, 0.000373929386206932),
    Complex64::new(0.00109713925301471, -0.00153219988568366),
    Complex64::new(-0.000822997471347754, -0.000140031434634188),
    Complex64::new(0.000896182317264214, -0.000835164328459981),
    Complex64::new(-0.00157770746633928, -0.000303794653066800),
    Complex64::new(0.000755913153376688, 0.00108748635434686),
    Complex64::new(0.000691246491351084, -0.000556673374244994),
    Complex64::new(0.000233147810677542, -0.000734349802916912),
    Complex64::new(-0.000195617316848781, -0.000154945338489743),
    Complex64::new(0.000407311564417282, -0.000853530053469442),
    Complex64::new(-0.000722511594188183, -0.000313570758095348),
    Complex64::new(0.000227097152831817, -0.00110287047767037),
    Complex64::new(-0.00259248055250948, -0.000471875974326385),
    Complex64::new(-0.000586264026928805, 0.00191608882520754),
    Complex64::new(0.000101609221059575, 0.000744744002384681),
    Complex64::new(0.000339817207812471, 0.000595601799964675),
    Complex64::new(-3.49644446093239e-05, 0.000563954656030864),
    Complex64::new(0.000673949619008653, 0.000310723599151972),
    Complex64::new(-0.000318859126372253, 0.000367181194435114),
    Complex64::new(0.00111610613898786, 0.000302181002376930),
    Complex64::new(-0.00144609203801138, -0.000879145244592523),
    Complex64::new(-0.00103278592163890, 0.00340299713362453),
    Complex64::new(0.00301682385173052, 0.00234848985608509)];

    for (a, b) in out.iter().zip(expected_result) 
    {
        assert_abs_diff_eq!(a.re, &b.re, epsilon=0.0000000000001);
        assert_abs_diff_eq!(a.im, &b.im, epsilon=0.0000000000001);
    }

    let c2r = real_planner.plan_fft_inverse(length);
    let mut inverse_signal = c2r.make_output_vec();
    
    c2r.process(&mut out[0..length / 2 + 1], &mut inverse_signal).unwrap();
    
    inverse_signal.iter_mut().for_each(|x|{*x *= 1.0 / length as f64});
    inverse_signal.resize(length / 2 + 1, 0.0);
    for (a, b) in inverse_signal.iter().zip(&orig_samples) 
    {
        assert_abs_diff_eq!(a, b, epsilon=0.0000000000001);
    }
    assert_eq!(inverse_signal.len(), orig_samples.len());
}


#[test]
fn test_full_signal()
{
    let input = load_as_mono("/Users/danielstrubig/Documents/CodingProjects/rust/exercises/visqol/visqol-rs/test_data/clean_speech/CA01_01.wav").unwrap();

    let mut samples = input.data_matrix.to_vec();

    let length = next_pow_two(samples.len());
    samples.resize(length, 0.0);
    // make a planner
    let mut real_planner = RealFftPlanner::<f64>::new();
    // create a FFT
    let r2c = real_planner.plan_fft_forward(length);
    // make input and output vectors
    let mut out = r2c.make_output_vec();
    r2c.process(&mut samples[..], &mut out[..]).unwrap();
}

#[test]
fn test_ones()
{

    let mut samples = vec![1.0; 262144];

    let length = next_pow_two(samples.len());
    samples.resize(length, 1.0);
    // make a planner
    let mut real_planner = RealFftPlanner::<f64>::new();
    // create a FFT
    let r2c = real_planner.plan_fft_forward(length);
    // make input and output vectors
    let mut out = r2c.make_output_vec();
    r2c.process(&mut samples[..], &mut out[..]).unwrap();
}